#name: C++ Build and Docker Test
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#
#    steps:
#      # Шаг 1: Checkout исходного кода
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Шаг 2: Установка Docker Buildx
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      # Шаг 3: Установка Docker Compose
#      - name: Install Docker Compose
#        run: |
#          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          sudo chmod +x /usr/local/bin/docker-compose
#          docker-compose --version
#
#      # Шаг 4: Запуск Docker Compose для сборки и тестирования приложения
#      - name: Build and test app
#        run: |
#          docker-compose up --build
#
#
#
#name: C++ Build and Docker Test
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#
#    steps:
#      # Шаг 1: Checkout исходного кода
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Шаг 2: Установка Docker Buildx
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      # Шаг 3: Установка Docker Compose
#      - name: Install Docker Compose
#        run: |
#          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          sudo chmod +x /usr/local/bin/docker-compose
#          docker-compose --version
#
#      # Шаг 4: Установка зависимостей для C++ и SQLite
#      - name: Install dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake g++ libsqlite3-dev
#
#      # Шаг 5: Сборка проекта с помощью CMake
#      - name: Build C++ project
#        run: |
#          mkdir -p build  # Создаём директорию build в корне проекта
#          cd build
#          cmake ../app1   # Указываем путь к папке с исходным кодом, где находится CMakeLists.txt
#          make
#
#      # Шаг 6: Запуск Docker Compose для сборки и тестирования приложения
#      - name: Build and test app with Docker Compose
#        run: |
#          docker-compose up --build
#
#      - name: Clean Docker cache
#        run: docker builder prune -f
#
name: C++ Build and Docker Test

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout исходного кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Шаг 3: Установка Docker Compose (фиксированная версия)
      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=2.20.2
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Шаг 4: Кеширование зависимостей
      - name: Cache C++ build
        uses: actions/cache@v3
        with:
            path: build
            key: cache-build-test
            restore-keys: |
              ${{ runner.os }}-build-

      # Шаг 5: Установка зависимостей для C++ и SQLite
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libsqlite3-dev

      # Шаг 6: Сборка проекта с помощью CMake
      - name: Build C++ project
        run: |
          mkdir -p build
          cd build
          cmake ../app1
          make

      # Шаг 7: Сборка Docker образов
      - name: Build Docker images
        run: docker-compose build

      # Шаг 8: Запуск тестов через Docker Compose
      - name: Run tests
        run: docker-compose up --exit-code-from app --abort-on-container-exit

      # Шаг 9: Очистка Docker-кэша
      - name: Clean Docker cache
        run: docker builder prune -f
